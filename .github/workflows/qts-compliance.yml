name: QTS Compliance
on: 
  schedule:
    - cron: '0 2 * * *'  # Daily at 2:00 UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-cov pytest-benchmark pytest-asyncio
    
    - name: Run scraper/API tests with coverage
      run: |
        pytest tests/scrapers tests/api -q --cov=cms_pricing --cov-report=xml --cov-report=html --cov-fail-under=90
    
    - name: Run PRD documentation audits
      run: |
        pytest tests/prd_docs -m prd_docs -q --maxfail=5
    
    - name: Run ingestor suites
      run: |
        pytest tests/ingestors -m ingestor -q --maxfail=3
    
    - name: Run scraper performance benchmarks
      run: |
        pytest tests/scrapers/test_opps_scraper_performance.py -q --benchmark-json=benchmark-results.json
    
    - name: Check performance regression
      run: |
        python tools/check_perf_regression.py benchmark-results.json .qts/last_benchmark.json
    
    - name: Run API contract tests
      run: |
        pytest tests/api/test_rvu_api_contracts.py tests/api/test_openapi_consistency.py -q --maxfail=1
    
    - name: Run schema drift checks
      run: |
        python tools/check_schema_drift.py
    
    - name: Emit OpenLineage events
      run: |
        python tools/emit_openlineage.py
    
    - name: Generate test report
      run: |
        python tools/generate_test_report.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qts-artifacts
        path: |
          coverage.xml
          htmlcov/
          benchmark-results.json
          test-report.json
          tests/**/manifest.yaml
          tests/**/baseline.json
    
    - name: Update baseline metrics
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p .qts
        cp benchmark-results.json .qts/last_benchmark.json
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .qts/last_benchmark.json
        git commit -m "Update QTS baseline metrics" || exit 0
        git push || exit 0

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run black formatter check
      run: |
        black --check --diff .
    
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .
    
    - name: Run flake8 linter
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run mypy type checker
      run: |
        mypy cms_pricing/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install security dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security linter
      run: |
        bandit -r cms_pricing/ -f json -o bandit-report.json
        bandit -r cms_pricing/ -ll
    
    - name: Run safety dependency check
      run: |
        safety check --json --output safety-report.json
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  golden-data-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Validate golden datasets
      run: |
        python tests/fixtures/opps/golden_datasets.py
    
    - name: Run golden data tests
      run: |
        pytest tests/fixtures/ -q --maxfail=1
    
    - name: Check fixture manifests
      run: |
        python tools/validate_fixture_manifests.py

  observability:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run observability tests
      run: |
        pytest tests/prd_docs/test_observability_alerting.py -q
    
    - name: Test dashboard metrics
      run: |
        python tools/test_dashboard_metrics.py
    
    - name: Test alerting rules
      run: |
        python tools/test_alerting_rules.py

  compliance-report:
    runs-on: ubuntu-latest
    needs: [test, lint, security, golden-data-validation, observability]
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: qts-artifacts
        path: ./artifacts
    
    - name: Download security artifacts
      uses: actions/download-artifact@v4
      with:
        name: security-reports
        path: ./security-artifacts
    
    - name: Generate compliance report
      run: |
        python tools/generate_compliance_report.py \
          --test-artifacts ./artifacts \
          --security-artifacts ./security-artifacts \
          --output compliance-report.json
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.json
    
    - name: Comment PR with compliance status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('compliance-report.json', 'utf8'));
          
          const comment = `## QTS Compliance Report
          
          **Overall Status**: ${report.overall_status}
          
          ### Test Results
          - **Unit Tests**: ${report.unit_tests.status} (${report.unit_tests.coverage}% coverage)
          - **Component Tests**: ${report.component_tests.status}
          - **Integration Tests**: ${report.integration_tests.status}
          - **Performance Tests**: ${report.performance_tests.status}
          - **Contract Tests**: ${report.contract_tests.status}
          
          ### Quality Gates
          - **Linting**: ${report.linting.status}
          - **Security**: ${report.security.status}
          - **Golden Data**: ${report.golden_data.status}
          - **Observability**: ${report.observability.status}
          
          ### Coverage Report
          ${report.coverage_summary}
          
          ### Performance Metrics
          ${report.performance_summary}
          
          **Generated**: ${report.generated_at}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

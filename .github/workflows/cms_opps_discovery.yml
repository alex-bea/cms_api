name: CMS OPPS Discovery & Ingestion

on:
  schedule:
    # Run every Monday at 6 AM UTC (quarterly releases typically on Mondays)
    - cron: '0 6 * * 1'
  workflow_dispatch:
    inputs:
      quarters:
        description: 'Number of quarters to process'
        required: false
        default: '2'
        type: string
      force_run:
        description: 'Force run even if no new data'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [main]
    paths:
      - 'cms_pricing/ingestion/ingestors/opps_ingestor.py'
      - 'cms_pricing/ingestion/scrapers/cms_opps_scraper.py'
      - 'cms_pricing/models/opps/**'
      - 'cms_pricing/ingestion/contracts/cms_opps*.json'

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  API_KEYS: ${{ secrets.API_KEYS }}

jobs:
  discover:
    name: Discover OPPS Files
    runs-on: ubuntu-latest
    outputs:
      files_found: ${{ steps.discover.outputs.files_found }}
      batch_ids: ${{ steps.discover.outputs.batch_ids }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Discover OPPS files
        id: discover
        run: |
          python -m cms_pricing.cli.opps_cli discover \
            --latest \
            --quarters ${{ github.event.inputs.quarters || '2' }} \
            --output-format json \
            --verbose > discovery_results.json
          
          # Extract results
          FILES_FOUND=$(jq -r '.files_found' discovery_results.json)
          BATCH_IDS=$(jq -r '.files[].batch_id' discovery_results.json | sort -u | tr '\n' ' ')
          
          echo "files_found=$FILES_FOUND" >> $GITHUB_OUTPUT
          echo "batch_ids=$BATCH_IDS" >> $GITHUB_OUTPUT
          
          echo "Discovered $FILES_FOUND files"
          echo "Batch IDs: $BATCH_IDS"
      
      - name: Upload discovery results
        uses: actions/upload-artifact@v3
        with:
          name: opps-discovery-results
          path: discovery_results.json
          retention-days: 7

  validate:
    name: Validate OPPS Data
    runs-on: ubuntu-latest
    needs: discover
    if: needs.discover.outputs.files_found != '0'
    
    strategy:
      matrix:
        batch_id: ${{ fromJson(needs.discover.outputs.batch_ids) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Download discovery results
        uses: actions/download-artifact@v3
        with:
          name: opps-discovery-results
      
      - name: Validate OPPS data
        run: |
          python -m cms_pricing.cli.opps_cli validate \
            --batch-id ${{ matrix.batch_id }} \
            --output-format json \
            --verbose > validation_results_${{ matrix.batch_id }}.json
      
      - name: Upload validation results
        uses: actions/upload-artifact@v3
        with:
          name: opps-validation-results-${{ matrix.batch_id }}
          path: validation_results_${{ matrix.batch_id }}.json
          retention-days: 7

  ingest:
    name: Ingest OPPS Data
    runs-on: ubuntu-latest
    needs: [discover, validate]
    if: needs.discover.outputs.files_found != '0'
    
    strategy:
      matrix:
        batch_id: ${{ fromJson(needs.discover.outputs.batch_ids) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set up database
        run: |
          # Start PostgreSQL container
          docker run -d \
            --name postgres-test \
            -e POSTGRES_PASSWORD=testpass \
            -e POSTGRES_DB=testdb \
            -p 5432:5432 \
            postgres:13
          
          # Wait for database to be ready
          sleep 10
          
          # Set database URL
          echo "DATABASE_URL=postgresql://postgres:testpass@localhost:5432/testdb" >> $GITHUB_ENV
      
      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
      
      - name: Ingest OPPS data
        run: |
          python -m cms_pricing.cli.opps_cli ingest \
            --batch-id ${{ matrix.batch_id }} \
            --output-format json \
            --verbose > ingestion_results_${{ matrix.batch_id }}.json
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
      
      - name: Upload ingestion results
        uses: actions/upload-artifact@v3
        with:
          name: opps-ingestion-results-${{ matrix.batch_id }}
          path: ingestion_results_${{ matrix.batch_id }}.json
          retention-days: 7
      
      - name: Cleanup database
        if: always()
        run: |
          docker stop postgres-test
          docker rm postgres-test

  test:
    name: Test OPPS Ingester
    runs-on: ubuntu-latest
    needs: [discover, validate, ingest]
    if: needs.discover.outputs.files_found != '0'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set up database
        run: |
          # Start PostgreSQL container
          docker run -d \
            --name postgres-test \
            -e POSTGRES_PASSWORD=testpass \
            -e POSTGRES_DB=testdb \
            -p 5432:5432 \
            postgres:13
          
          # Wait for database to be ready
          sleep 10
          
          # Set database URL
          echo "DATABASE_URL=postgresql://postgres:testpass@localhost:5432/testdb" >> $GITHUB_ENV
      
      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
      
      - name: Run OPPS ingester tests
        run: |
          python -m pytest tests/integration/test_opps_ingestor_e2e.py \
            -v \
            --tb=short \
            --junitxml=test-results.xml
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: opps-test-results
          path: test-results.xml
          retention-days: 7
      
      - name: Cleanup database
        if: always()
        run: |
          docker stop postgres-test
          docker rm postgres-test

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [discover, validate, ingest, test]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate summary
        run: |
          echo "# OPPS Discovery & Ingestion Results" > summary.md
          echo "" >> summary.md
          echo "## Discovery Results" >> summary.md
          echo "- Files found: ${{ needs.discover.outputs.files_found }}" >> summary.md
          echo "- Batch IDs: ${{ needs.discover.outputs.batch_ids }}" >> summary.md
          echo "" >> summary.md
          echo "## Job Status" >> summary.md
          echo "- Discover: ${{ needs.discover.result }}" >> summary.md
          echo "- Validate: ${{ needs.validate.result }}" >> summary.md
          echo "- Ingest: ${{ needs.ingest.result }}" >> summary.md
          echo "- Test: ${{ needs.test.result }}" >> summary.md
          echo "" >> summary.md
          echo "## Artifacts" >> summary.md
          echo "- Discovery results: opps-discovery-results" >> summary.md
          echo "- Validation results: opps-validation-results-*" >> summary.md
          echo "- Ingestion results: opps-ingestion-results-*" >> summary.md
          echo "- Test results: opps-test-results" >> summary.md
      
      - name: Upload summary
        uses: actions/upload-artifact@v3
        with:
          name: opps-summary
          path: summary.md
          retention-days: 30
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
      
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'OPPS Discovery & Ingestion Failed',
              body: 'The OPPS discovery and ingestion workflow has failed. Please check the logs for details.',
              labels: ['bug', 'opps', 'ingestion']
            });

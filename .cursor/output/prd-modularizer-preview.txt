# Modularization Guidance for `prds/STD-parser-contracts-prd-v1.0.md`

- Total lines (approx): **4476**
- Section count: **285**
- Status: Document exceeds 1200 line threshold → modularization recommended.

## Suggested Document Breakdown

### STD core policy
- Proposed filename: `STD-parser-contracts-prd-v2.0.md`
- Purpose: High-stability policy, scope, contracts, versioning, risks.
- Sections captured (548 lines):
  - Parser Contracts Standard (lines 1-22, anchor `#parser-contracts-standard`)
  - 1. Summary (lines 23-49, anchor `#1-summary`)
  - 2. Goals & Non-Goals (lines 50-51, anchor `#2-goals-non-goals`)
  - Goals (lines 52-62, anchor `#goals`)
  - Non-Goals (lines 63-71, anchor `#non-goals`)
  - 3. Users & Scenarios (lines 72-73, anchor `#3-users-scenarios`)
  - Primary Users (lines 74-80, anchor `#primary-users`)
  - 4. Key Decisions & Rationale (lines 104-120, anchor `#4-key-decisions-rationale`)
  - 5. Scope & Requirements (lines 121-122, anchor `#5-scope-requirements`)
  - 6. Contracts (lines 897-898, anchor `#6-contracts`)
  - 6.1 Function Contract (Python) (lines 899-912, anchor `#61-function-contract-python`)
  - 6.2 Router Contract (lines 1011-1056, anchor `#62-router-contract`)
  - 6.3 Schema Contract Format (lines 1057-1091, anchor `#63-schema-contract-format`)
  - 6.4 Metadata Injection Contract (lines 1092-1124, anchor `#64-metadata-injection-contract`)
  - Validation summary (lines 2565-2574, anchor `#validation-summary`)
  - 11. Provenance Requirements (lines 2717-2718, anchor `#11-provenance-requirements`)
  - 12. Compatibility & Versioning (lines 2770-2771, anchor `#12-compatibility-versioning`)
  - 12.1 Parser Versioning (SemVer) (lines 2772-2788, anchor `#121-parser-versioning-semver`)
  - 12.2 Schema Versioning (SemVer) (lines 2789-2800, anchor `#122-schema-versioning-semver`)
  - 12.3 Layout Versioning (SemVer) (lines 2801-2813, anchor `#123-layout-versioning-semver`)
  - 13. Security & Compliance (lines 2825-2844, anchor `#13-security-compliance`)
  - 14. Testing Strategy (lines 2845-2846, anchor `#14-testing-strategy`)
  - 15. Rollout & Operations (lines 2987-2988, anchor `#15-rollout-operations`)
  - 16. Directory Layout (lines 3018-3067, anchor `#16-directory-layout`)
  - 17. Current Implementation (lines 3068-3069, anchor `#17-current-implementation`)
  - 18. Acceptance Criteria (lines 3118-3161, anchor `#18-acceptance-criteria`)
  - 19. Risks & Mitigations (lines 3162-3175, anchor `#19-risks-mitigations`)
  - 20. Implementation Roadmap (lines 3176-3177, anchor `#20-implementation-roadmap`)
  - v1.1: Enhanced Contracts (Current) (lines 3178-3203, anchor `#v11-enhanced-contracts-current`)
  - v1.1: Enhanced Contracts (Future - ~6 months) (lines 3204-3216, anchor `#v11-enhanced-contracts-future---6-months`)
  - 20.1 Common Pitfalls & Anti-Patterns (v1.3) (lines 3252-3255, anchor `#201-common-pitfalls-anti-patterns-v13`)
  - 21. Change Log (lines 3570-3588, anchor `#21-change-log`)
  - 21.5 Per-Parser Acceptance Checklist (lines 4204-4234, anchor `#215-per-parser-acceptance-checklist`)
  - Appendix D: Backward Compatibility (lines 4403-4404, anchor `#appendix-d-backward-compatibility`)
  - QA Summary (lines 4445-4476, anchor `#qa-summary`)
  - Governance reminder: add companion references per §1.5 of STD-doc-governance.

### STD companion implementation guide
- Proposed filename: `STD-parser-contracts-impl-v2.0.md`
- Purpose: Detailed how-to content, templates, anti-patterns for engineers.
- Sections captured (309 lines):
  - 5.1 Inputs (lines 123-152, anchor `#51-inputs`)
  - 5.2 Processing Requirements (lines 153-182, anchor `#52-processing-requirements`)
  - 5.2.3 Alias Map Best Practices & Testing (Added 2025-10-17) (lines 183-202, anchor `#523-alias-map-best-practices-testing-added-2025-10-17`)
  - 5.2.4 Defensive Type Handling Patterns (Added 2025-10-17) (lines 494-515, anchor `#524-defensive-type-handling-patterns-added-2025-10-17`)
  - Stage 3: Canonicalize to schema (deterministic strings) (lines 569-575, anchor `#stage-3-canonicalize-to-schema-deterministic-strings`)
  - ✅ CORRECT: Use canonicalize_numeric_col (lines 617-619, anchor `#correct-use-canonicalizenumericcol`)
  - Better: Use canonicalize_numeric_col which handles this (lines 694-812, anchor `#better-use-canonicalizenumericcol-which-handles-this`)
  - Parser outputs schema format (DB canonical): (lines 1239-1240, anchor `#parser-outputs-schema-format-db-canonical`)
  - Anti-Pattern 1: Positional get_layout() Arguments (lines 3256-3265, anchor `#anti-pattern-1-positional-getlayout-arguments`)
  - Anti-Pattern 2: Layout-Schema Column Name Mismatch (lines 3280-3283, anchor `#anti-pattern-2-layout-schema-column-name-mismatch`)
  - Anti-Pattern 3: min_line_length Too High (lines 3307-3316, anchor `#anti-pattern-3-minlinelength-too-high`)
  - Anti-Pattern 4: Category Validation After Cast (lines 3329-3333, anchor `#anti-pattern-4-category-validation-after-cast`)
  - Anti-Pattern 5: Hash Includes Metadata (lines 3353-3357, anchor `#anti-pattern-5-hash-includes-metadata`)
  - Anti-Pattern 6: BOM in Header Names (lines 3380-3384, anchor `#anti-pattern-6-bom-in-header-names`)
  - Anti-Pattern 7: Duplicate Headers Mangled by Pandas (lines 3405-3408, anchor `#anti-pattern-7-duplicate-headers-mangled-by-pandas`)
  - Anti-Pattern 8: Excel Date/Float Coercion (lines 3429-3433, anchor `#anti-pattern-8-excel-datefloat-coercion`)
  - Anti-Pattern 9: Whitespace & NBSP in Codes (lines 3457-3463, anchor `#anti-pattern-9-whitespace-nbsp-in-codes`)
  - Anti-Pattern 10: CRLF Leftovers in Fixed-Width (lines 3487-3490, anchor `#anti-pattern-10-crlf-leftovers-in-fixed-width`)
  - Anti-Pattern 11: Range Validation Before Type Casting (lines 3512-3515, anchor `#anti-pattern-11-range-validation-before-type-casting`)
  - canonicalize_numeric_col() returns strings for hash stability (lines 3516-3518, anchor `#canonicalizenumericcol-returns-strings-for-hash-stability`)
  - 21. Parser Implementation Template (Phase 1 Guide) (lines 3589-3590, anchor `#21-parser-implementation-template-phase-1-guide`)
  - 21.2 Validation Phases & Rejects Handling (lines 3705-3708, anchor `#212-validation-phases-rejects-handling`)
  - ❌ ANTI-PATTERN: Validate before or during canonicalization (lines 3723-3726, anchor `#anti-pattern-validate-before-or-during-canonicalization`)
  - Include `Companion to: <core STD>` in header and keep change log in sync.

### REF routing/reference architecture
- Proposed filename: `REF-parser-contracts-routing-v1.0.md`
- Purpose: Router/layout detection strategies, flowcharts, anti-patterns.
- Sections captured (288 lines):
  - API router transforms for response (presentation format): (lines 1246-1281, anchor `#api-router-transforms-for-response-presentation-format`)
  - Usage in API router: (lines 1296-1311, anchor `#usage-in-api-router`)
  - 7. Router & Layout Registry (lines 1312-1313, anchor `#7-router-layout-registry`)
  - 7.1 Router & Format Detection (Enhanced 2025-10-17) (lines 1314-1317, anchor `#71-router-format-detection-enhanced-2025-10-17`)
  - 7.1.1 Format Detection Strategy (lines 1318-1323, anchor `#711-format-detection-strategy`)
  - 7.1.2 ZIP File Handling (lines 1382-1442, anchor `#712-zip-file-handling`)
  - 7.1.3 Format Detection Flowchart (lines 1443-1475, anchor `#713-format-detection-flowchart`)
  - 7.1.4 Router Pattern Matching (lines 1476-1502, anchor `#714-router-pattern-matching`)
  - 7.2 Layout Registry (lines 1566-1630, anchor `#72-layout-registry`)
  - 7.3 Layout-Schema Alignment (v1.3 - CRITICAL) (lines 1685-1711, anchor `#73-layout-schema-alignment-v13---critical`)
  - A.4 ZIP Archives (lines 4342-4352, anchor `#a4-zip-archives`)

### REF quality guardrails
- Proposed filename: `REF-parser-contracts-quality-guardrails-v1.0.md`
- Purpose: Validation tiers, error taxonomy, metrics, observability patterns.
- Sections captured (690 lines):
  - ❌ WRONG: Creates NaN without logging (lines 667-669, anchor `#wrong-creates-nan-without-logging`)
  - Quality column (lines 1134-1148, anchor `#quality-column`)
  - 8. Validation Requirements (lines 1886-1887, anchor `#8-validation-requirements`)
  - 8.1 Schema Validation (lines 1888-1899, anchor `#81-schema-validation`)
  - 8.2 Reference Validation Hooks (lines 1900-1917, anchor `#82-reference-validation-hooks`)
  - 8.2.1 Categorical Domain Validation (lines 1918-1925, anchor `#821-categorical-domain-validation`)
  - - metrics: Validation metrics (reject_rate, columns_validated, reject_rate_by_column) (lines 1947-1955, anchor `#--metrics-validation-metrics-rejectrate-columnsvalidated-rejectratebycolumn`)
  - 8.3 Validation Tiers (lines 1956-1981, anchor `#83-validation-tiers`)
  - 8.4 Quarantine Artifact Format (lines 1982-2005, anchor `#84-quarantine-artifact-format`)
  - 8.5 Error Code Severity Table & Uniqueness Policies (v1.3) (lines 2006-2044, anchor `#85-error-code-severity-table-uniqueness-policies-v13`)
  - 9. Error Taxonomy (lines 2081-2082, anchor `#9-error-taxonomy`)
  - 9.1 Exception Hierarchy (v1.3) (lines 2083-2144, anchor `#91-exception-hierarchy-v13`)
  - 9.2 Error Codes (v1.0) (lines 2145-2179, anchor `#92-error-codes-v10`)
  - 10. Observability & Metrics (lines 2180-2181, anchor `#10-observability-metrics`)
  - 10.1 Per-File Metrics (lines 2182-2188, anchor `#101-per-file-metrics`)
  - 10.1.1 Safe Metrics Calculation Pattern (Added 2025-10-17) (lines 2189-2194, anchor `#1011-safe-metrics-calculation-pattern-added-2025-10-17`)
  - Usage in metrics calculation (lines 2233-2295, anchor `#usage-in-metrics-calculation`)
  - Step 9: Build comprehensive metrics (lines 2296-2298, anchor `#step-9-build-comprehensive-metrics`)
  - Calculate GPCI value metrics safely (lines 2299-2303, anchor `#calculate-gpci-value-metrics-safely`)
  - Calculate locality metrics (lines 2304-2321, anchor `#calculate-locality-metrics`)
  - Add warnings for unexpected metric values (lines 2322-2375, anchor `#add-warnings-for-unexpected-metric-values`)
  - 10.2 Aggregate Metrics (Per Run) (lines 2376-2386, anchor `#102-aggregate-metrics-per-run`)
  - 10.3 Safe Metrics Calculation Patterns (Added 2025-10-17) (lines 2387-2393, anchor `#103-safe-metrics-calculation-patterns-added-2025-10-17`)
  - ❌ WRONG: No validation of result (lines 2400-2407, anchor `#wrong-no-validation-of-result`)
  - Calculate GPCI value ranges with validation (lines 2462-2474, anchor `#calculate-gpci-value-ranges-with-validation`)
  - Comprehensive Metrics Pattern (lines 2529-2533, anchor `#comprehensive-metrics-pattern`)
  - Sanity Checks & Validation (lines 2575-2579, anchor `#sanity-checks-validation`)
  - After calculating metrics, validate ranges (lines 2580-2610, anchor `#after-calculating-metrics-validate-ranges`)
  - Call after metrics calculation (lines 2611-2616, anchor `#call-after-metrics-calculation`)
  - 10.4 Logging Requirements (lines 2687-2716, anchor `#104-logging-requirements`)
  - Phase 2: Enhanced Validation (Next - After v1.0) (lines 3217-3227, anchor `#phase-2-enhanced-validation-next---after-v10`)
  - Category validation fails: (lines 3464-3471, anchor `#category-validation-fails`)
  - Strip whitespace + replace NBSP before validation: (lines 3472-3477, anchor `#strip-whitespace-replace-nbsp-before-validation`)
  - Range validation on string column FAILS (lines 3519-3530, anchor `#range-validation-on-string-column-fails`)
  - Step 2: Range validation AFTER canonicalization (lines 3534-3534, anchor `#step-2-range-validation-after-canonicalization`)
  - Step 5.5: Range validation (post-cast) (lines 3745-3756, anchor `#step-55-range-validation-post-cast`)
  - Step 6: Categorical validation (lines 3757-3759, anchor `#step-6-categorical-validation`)
  - Error Message Enrichment (MUST) (lines 3767-3778, anchor `#error-message-enrichment-must`)
  - Guardrail Warnings in Metrics (lines 3799-3826, anchor `#guardrail-warnings-in-metrics`)
  - 21.3 Tiered Validation Thresholds (Added 2025-10-17) (lines 3840-3846, anchor `#213-tiered-validation-thresholds-added-2025-10-17`)
  - Step 5.5: Row count validation (no test-only bypass!) (lines 3901-3904, anchor `#step-55-row-count-validation-no-test-only-bypass`)
  - Continues execution (only ERROR tier raises ParseError) (lines 3905-3933, anchor `#continues-execution-only-error-tier-raises-parseerror`)
  - Appendix C: Reference Validation Details (lines 4375-4376, anchor `#appendix-c-reference-validation-details`)
  - C.1 HCPCS/CPT Validation (lines 4377-4388, anchor `#c1-hcpcscpt-validation`)
  - C.2 Locality Code Validation (lines 4389-4402, anchor `#c2-locality-code-validation`)

### RUN QA/operations runbook
- Proposed filename: `RUN-parser-contracts-qa-runbook-prd-v1.0.md`
- Purpose: SLAs, checklists, golden workflows, production procedures.
- Sections captured (331 lines):
  - 5.5 Constraints & SLAs (lines 877-896, anchor `#55-constraints-slas`)
  - 7.1.6 Implementation Checklist (lines 1544-1565, anchor `#716-implementation-checklist`)
  - Implementation Checklist (lines 2661-2686, anchor `#implementation-checklist`)
  - 14.2 Golden-File Tests (lines 2889-2899, anchor `#142-golden-file-tests`)
  - 21.4 Format Verification Pre-Implementation Checklist (Added 2025-10-17) (lines 3973-3985, anchor `#214-format-verification-pre-implementation-checklist-added-2025-10-17`)
  - Pre-Implementation Verification Checklist (lines 3986-4007, anchor `#pre-implementation-verification-checklist`)
  - Step 2c: Real Data Format Variance Analysis (5-10 min) (lines 4025-4203, anchor `#step-2c-real-data-format-variance-analysis-5-10-min`)
  - 21.7 Golden-First Development Workflow (lines 4270-4307, anchor `#217-golden-first-development-workflow`)
  - Ensure SLA tables and checklists align with RUN naming rules (prefix + `-prd`).

### REF appendix
- Proposed filename: `REF-parser-contracts-appendix-v1.0.md`
- Purpose: Static reference tables, examples, compatibility matrices.
- Sections captured (35 lines):
  - Pattern: Log examples of failed casts (lines 592-616, anchor `#pattern-log-examples-of-failed-casts`)
  - ✅ GOOD: Rich message with examples (lines 3782-3787, anchor `#good-rich-message-with-examples`)
  - Appendix A: CMS File Format Reference (lines 4308-4309, anchor `#appendix-a-cms-file-format-reference`)
  - Appendix B: Column Normalization Examples (lines 4353-4354, anchor `#appendix-b-column-normalization-examples`)

### Review needed
- Proposed filename: `TBD`
- Purpose: Sections that did not match any rule; inspect manually.
- Sections captured (2275 lines):
  - Scenarios (lines 81-103, anchor `#scenarios`)
  - Location: In parser module (e.g., gpci_parser.py) (lines 203-248, anchor `#location-in-parser-module-eg-gpciparserpy`)
  - Usage in parser (lines 249-404, anchor `#usage-in-parser`)
  - ❌ WRONG: Only map one format (lines 405-410, anchor `#wrong-only-map-one-format`)
  - ✅ CORRECT: All formats covered (lines 411-423, anchor `#correct-all-formats-covered`)
  - ❌ WRONG: Exact case required (lines 424-427, anchor `#wrong-exact-case-required`)
  - ✅ CORRECT: Case-insensitive (lines 428-435, anchor `#correct-case-insensitive`)
  - ❌ WRONG: Skip unmapped columns silently (lines 436-438, anchor `#wrong-skip-unmapped-columns-silently`)
  - ✅ CORRECT: Log unmapped columns (lines 439-446, anchor `#correct-log-unmapped-columns`)
  - ❌ WRONG: Delete old aliases (lines 447-447, anchor `#wrong-delete-old-aliases`)
  - Removed '2024 PW GPCI' (no longer used) (lines 448-449, anchor `#removed-2024-pw-gpci-no-longer-used`)
  - ✅ CORRECT: Keep for historical data (lines 450-493, anchor `#correct-keep-for-historical-data`)
  - Recommended: Use parser kit (handles all cases) (lines 516-562, anchor `#recommended-use-parser-kit-handles-all-cases`)
  - Stage 1: Clean strings (remove whitespace, NBSP) (lines 563-565, anchor `#stage-1-clean-strings-remove-whitespace-nbsp`)
  - Stage 2: Cast to intermediate types (pandas native) (lines 566-568, anchor `#stage-2-cast-to-intermediate-types-pandas-native`)
  - Pattern: Check for empty before casting (lines 576-591, anchor `#pattern-check-for-empty-before-casting`)
  - ❌ WRONG: Direct Decimal() fails on empty/invalid (lines 620-625, anchor `#wrong-direct-decimal-fails-on-emptyinvalid`)
  - ✅ CORRECT: Cast with coercion, handle NaN (lines 626-628, anchor `#correct-cast-with-coercion-handle-nan`)
  - ❌ WRONG: Direct int() fails on empty (lines 629-634, anchor `#wrong-direct-int-fails-on-empty`)
  - ✅ CORRECT: Map known values, handle unknown (lines 635-638, anchor `#correct-map-known-values-handle-unknown`)
  - ❌ WRONG: Direct bool() gives unexpected results (lines 639-644, anchor `#wrong-direct-bool-gives-unexpected-results`)
  - ✅ CORRECT: Use pandas with format, handle errors (lines 645-647, anchor `#correct-use-pandas-with-format-handle-errors`)
  - ❌ WRONG: No format specified, ambiguous dates (lines 648-657, anchor `#wrong-no-format-specified-ambiguous-dates`)
  - ❌ WRONG: Crashes on first invalid value (lines 658-660, anchor `#wrong-crashes-on-first-invalid-value`)
  - ✅ CORRECT: Handle errors gracefully (lines 661-666, anchor `#correct-handle-errors-gracefully`)
  - ✅ CORRECT: Log coercion failures (lines 670-679, anchor `#correct-log-coercion-failures`)
  - ❌ WRONG: Assume float input (lines 680-682, anchor `#wrong-assume-float-input`)
  - ✅ CORRECT: Cast first, then operate (lines 683-688, anchor `#correct-cast-first-then-operate`)
  - ❌ WRONG: Empty strings fail (lines 689-691, anchor `#wrong-empty-strings-fail`)
  - ✅ CORRECT: Filter empties (lines 692-693, anchor `#correct-filter-empties`)
  - 5.3 Output Artifacts (lines 813-851, anchor `#53-output-artifacts`)
  - 5.4 CMS File Type Support (lines 852-876, anchor `#54-cms-file-type-support`)
  - Pure function requirement (lines 913-915, anchor `#pure-function-requirement`)
  - Example signature for dataset-specific parser (lines 916-1010, anchor `#example-signature-for-dataset-specific-parser`)
  - Required metadata columns (lines 1125-1133, anchor `#required-metadata-columns`)
  - 6.5 Integration with DIS Pipeline (lines 1149-1215, anchor `#65-integration-with-dis-pipeline`)
  - 6.6 Schema vs API Naming Convention (v1.3) (lines 1216-1238, anchor `#66-schema-vs-api-naming-convention-v13`)
  - result.data has columns: rvu_work, rvu_pe_nonfac, rvu_pe_fac, rvu_malp (lines 1241-1242, anchor `#resultdata-has-columns-rvuwork-rvupenonfac-rvupefac-rvumalp`)
  - Database stores schema format (no transformation): (lines 1243-1245, anchor `#database-stores-schema-format-no-transformation`)
  - Transformation layer (NOT in parser, NOT in schema) (lines 1282-1282, anchor `#transformation-layer-not-in-parser-not-in-schema`)
  - Location: cms_pricing/mappers/__init__.py (API adapter only) (lines 1283-1295, anchor `#location-cmspricingmappersinitpy-api-adapter-only`)
  - Check file extension first (90% of cases) (lines 1324-1381, anchor `#check-file-extension-first-90-of-cases`)
  - 7.1.5 Common Detection Pitfalls (lines 1503-1506, anchor `#715-common-detection-pitfalls`)
  - ❌ WRONG: Trust extension blindly (lines 1507-1510, anchor `#wrong-trust-extension-blindly`)
  - ✅ CORRECT: Verify with content (lines 1511-1517, anchor `#correct-verify-with-content`)
  - ❌ WRONG: Fail immediately (lines 1518-1522, anchor `#wrong-fail-immediately`)
  - ✅ CORRECT: Try CSV as fallback (lines 1523-1534, anchor `#correct-try-csv-as-fallback`)
  - ❌ WRONG: Check only first line (lines 1535-1537, anchor `#wrong-check-only-first-line`)
  - ✅ CORRECT: Check first 500-1000 bytes (lines 1538-1543, anchor `#correct-check-first-500-1000-bytes`)
  - Looks up: ("pprrvu", "2025", "Q4"), then ("pprrvu", "2025", None) (lines 1631-1631, anchor `#looks-up-pprrvu-2025-q4-then-pprrvu-2025-none`)
  - Returns: {'version': 'v2025.4.1', 'columns': {...}, 'min_line_length': 165} (lines 1632-1653, anchor `#returns-version-v202541-columns-minlinelength-165`)
  - File: layout_registry/pprrvu/v2025.4.0.yaml (lines 1654-1684, anchor `#file-layoutregistrypprrvuv202540yaml`)
  - In parser, after _normalize_column_names(df): (lines 1712-1748, anchor `#in-parser-after-normalizecolumnnamesdf`)
  - Result: 0/7 tests passing, KeyError: 'rvu_work' (lines 1749-1763, anchor `#result-07-tests-passing-keyerror-rvuwork`)
  - Result: 7/7 tests passing, production-ready (lines 1764-1790, anchor `#result-77-tests-passing-production-ready`)
  - 7.4 CI Test Snippets (v1.3 - Copy/Paste Guards) (lines 1791-1872, anchor `#74-ci-test-snippets-v13---copypaste-guards`)
  - In tests/ingestion/test_layout_compliance.py (lines 1873-1885, anchor `#in-testsingestiontestlayoutcompliancepy`)
  - See cms_pricing/ingestion/parsers/_parser_kit.py for full implementation (lines 1926-1933, anchor `#see-cmspricingingestionparsersparserkitpy-for-full-implementation`)
  - Usage (lines 1934-1943, anchor `#usage`)
  - Returns ValidationResult with: (lines 1944-1944, anchor `#returns-validationresult-with`)
  - - valid_df: Valid rows with categorical dtypes applied (lines 1945-1945, anchor `#--validdf-valid-rows-with-categorical-dtypes-applied`)
  - - rejects_df: Rejected rows with row_id, schema_id, release_id, reason codes (lines 1946-1946, anchor `#--rejectsdf-rejected-rows-with-rowid-schemaid-releaseid-reason-codes`)
  - In parser module (e.g., pprrvu_parser.py): (lines 2045-2047, anchor `#in-parser-module-eg-pprrvuparserpy`)
  - In parser normalize stage: (lines 2048-2071, anchor `#in-parser-normalize-stage`)
  - Could externalize to config file: (lines 2072-2080, anchor `#could-externalize-to-config-file`)
  - ❌ WRONG: Fails on empty strings or nulls (lines 2195-2198, anchor `#wrong-fails-on-empty-strings-or-nulls`)
  - ❌ WRONG: Fails on empty DataFrame (lines 2199-2204, anchor `#wrong-fails-on-empty-dataframe`)
  - ✅ CORRECT: Filter empty values before aggregation (lines 2205-2232, anchor `#correct-filter-empty-values-before-aggregation`)
  - ❌ WRONG: Fails if column has empty strings (lines 2394-2396, anchor `#wrong-fails-if-column-has-empty-strings`)
  - ❌ WRONG: Fails on empty DataFrame (lines 2397-2399, anchor `#wrong-fails-on-empty-dataframe`)
  - Safe Min/Max Calculation (lines 2408-2461, anchor `#safe-minmax-calculation`)
  - Safe Count Calculation (lines 2475-2498, anchor `#safe-count-calculation`)
  - Safe Percentage Calculation (lines 2499-2528, anchor `#safe-percentage-calculation`)
  - Core counts (always include) (lines 2534-2541, anchor `#core-counts-always-include`)
  - Encoding info (lines 2542-2547, anchor `#encoding-info`)
  - Column-specific stats (use safe aggregation) (lines 2548-2553, anchor `#column-specific-stats-use-safe-aggregation`)
  - Null rates (safe percentage) (lines 2554-2559, anchor `#null-rates-safe-percentage`)
  - Categorical distributions (top N) (lines 2560-2564, anchor `#categorical-distributions-top-n`)
  - Anti-Patterns to Avoid (lines 2617-2620, anchor `#anti-patterns-to-avoid`)
  - ❌ WRONG: Fails on empty strings (lines 2621-2623, anchor `#wrong-fails-on-empty-strings`)
  - ✅ CORRECT: Filter first (lines 2624-2630, anchor `#correct-filter-first`)
  - ❌ WRONG: Returns NaN or fails (lines 2631-2633, anchor `#wrong-returns-nan-or-fails`)
  - ✅ CORRECT: Check for empty (lines 2634-2639, anchor `#correct-check-for-empty`)
  - ❌ WRONG: Silently accepts impossible values (lines 2640-2642, anchor `#wrong-silently-accepts-impossible-values`)
  - ✅ CORRECT: Validate against expected range (lines 2643-2650, anchor `#correct-validate-against-expected-range`)
  - ❌ WRONG: Breaks if column has strings and numbers (lines 2651-2653, anchor `#wrong-breaks-if-column-has-strings-and-numbers`)
  - ✅ CORRECT: Convert to numeric first (lines 2654-2660, anchor `#correct-convert-to-numeric-first`)
  - 11.1 Provenance Manifest (lines 2719-2769, anchor `#111-provenance-manifest`)
  - 12.4 Backfill Requirements (lines 2814-2824, anchor `#124-backfill-requirements`)
  - 14.1 Unit Tests (lines 2847-2888, anchor `#141-unit-tests`)
  - 14.3 Schema Drift Tests (lines 2900-2909, anchor `#143-schema-drift-tests`)
  - 14.4 Layout Version Tests (lines 2910-2918, anchor `#144-layout-version-tests`)
  - 14.5 Performance Tests (lines 2919-2929, anchor `#145-performance-tests`)
  - 14.6 Schema File Naming & Loading (v1.3) (lines 2930-2986, anchor `#146-schema-file-naming-loading-v13`)
  - 15.1 Deployment Strategy (lines 2989-3001, anchor `#151-deployment-strategy`)
  - 15.2 Monitoring (lines 3002-3017, anchor `#152-monitoring`)
  - 17.1 Existing Components (lines 3070-3102, anchor `#171-existing-components`)
  - 17.2 Implementation Status (lines 3103-3117, anchor `#172-implementation-status`)
  - Phase 3: Performance Optimization (Future) (lines 3228-3238, anchor `#phase-3-performance-optimization-future`)
  - Phase 4: Advanced Features (Future) (lines 3239-3251, anchor `#phase-4-advanced-features-future`)
  - Use keyword arguments (self-documenting): (lines 3266-3279, anchor `#use-keyword-arguments-self-documenting`)
  - Layout:          Schema: (lines 3284-3291, anchor `#layout-schema`)
  - BEFORE coding parser, verify alignment: (lines 3292-3299, anchor `#before-coding-parser-verify-alignment`)
  - Fails fast with: Missing: {'rvu_work', 'modifier', 'rvu_malp'} (lines 3300-3306, anchor `#fails-fast-with-missing-rvuwork-modifier-rvumalp`)
  - Measure actual data first: (lines 3317-3318, anchor `#measure-actual-data-first`)
  - Output: 173, 173, 173, ... (lines 3319-3320, anchor `#output-173-173-173`)
  - Set conservatively (with margin): (lines 3321-3328, anchor `#set-conservatively-with-margin`)
  - Unknown value 'Z' silently becomes NaN! ❌ (lines 3334-3338, anchor `#unknown-value-z-silently-becomes-nan`)
  - Validate BEFORE casting: (lines 3339-3344, anchor `#validate-before-casting`)
  - Only then cast: (lines 3345-3352, anchor `#only-then-cast`)
  - Includes release_id, parsed_at! ❌ (lines 3358-3363, anchor `#includes-releaseid-parsedat`)
  - Exclude metadata columns: (lines 3364-3379, anchor `#exclude-metadata-columns`)
  - Column becomes: '\ufeffhcpcs' (U+FEFF BOM prefix) (lines 3385-3391, anchor `#column-becomes-ufeffhcpcs-ufeff-bom-prefix`)
  - Detect and strip BOM BEFORE parsing: (lines 3392-3398, anchor `#detect-and-strip-bom-before-parsing`)
  - Verify after normalization: (lines 3399-3404, anchor `#verify-after-normalization`)
  - CSV has: description,amount,description (lines 3409-3410, anchor `#csv-has-descriptionamountdescription`)
  - Pandas auto-renames: description, amount, description.1 (lines 3411-3416, anchor `#pandas-auto-renames-description-amount-description1`)
  - Detect and reject duplicate headers (add to §21.1 template): (lines 3417-3422, anchor `#detect-and-reject-duplicate-headers-add-to-211-template`)
  - OR normalize intentionally (if duplicates are expected): (lines 3423-3428, anchor `#or-normalize-intentionally-if-duplicates-are-expected`)
  - Excel date 01/02/2025 → locale-dependent interpretation (lines 3434-3434, anchor `#excel-date-01022025-locale-dependent-interpretation`)
  - Float 19.31 → 19.30999999999... (binary precision loss) (lines 3435-3439, anchor `#float-1931-1930999999999-binary-precision-loss`)
  - Read Excel as strings, then cast: (lines 3440-3442, anchor `#read-excel-as-strings-then-cast`)
  - Cast with schema-driven precision: (lines 3443-3456, anchor `#cast-with-schema-driven-precision`)
  - Then validate: (lines 3478-3486, anchor `#then-validate`)
  - Windows file with CRLF endings: (lines 3491-3495, anchor `#windows-file-with-crlf-endings`)
  - min_line_length check fails or last char misaligned (lines 3496-3500, anchor `#minlinelength-check-fails-or-last-char-misaligned`)
  - Strip CRLF when measuring and detecting data start: (lines 3501-3511, anchor `#strip-crlf-when-measuring-and-detecting-data-start`)
  - Step 1: Cast to canonical string (for hashing) (lines 3531-3533, anchor `#step-1-cast-to-canonical-string-for-hashing`)
  - Convert back to numeric for comparison (lines 3535-3569, anchor `#convert-back-to-numeric-for-comparison`)
  - 21.1 Standard Parser Structure (lines 3591-3704, anchor `#211-standard-parser-structure`)
  - Phase Order (MUST) (lines 3709-3715, anchor `#phase-order-must`)
  - String vs Numeric Handling (CRITICAL) (lines 3716-3722, anchor `#string-vs-numeric-handling-critical`)
  - ✅ CORRECT: Validate after canonicalization with numeric conversion (lines 3727-3739, anchor `#correct-validate-after-canonicalization-with-numeric-conversion`)
  - Rejects Aggregation Pattern (lines 3740-3744, anchor `#rejects-aggregation-pattern`)
  - Aggregate all rejects (lines 3760-3766, anchor `#aggregate-all-rejects`)
  - ❌ POOR: Generic message (lines 3779-3781, anchor `#poor-generic-message`)
  - ❌ POOR: No context (lines 3788-3790, anchor `#poor-no-context`)
  - ✅ GOOD: Include example duplicate (lines 3791-3798, anchor `#good-include-example-duplicate`)
  - In main parser (lines 3827-3833, anchor `#in-main-parser`)
  - Tests look for specific keys (lines 3834-3839, anchor `#tests-look-for-specific-keys`)
  - ❌ PROHIBITED: Test-only bypass flag (lines 3847-3856, anchor `#prohibited-test-only-bypass-flag`)
  - ✅ REQUIRED: Tiered thresholds with severity levels (lines 3857-3900, anchor `#required-tiered-thresholds-with-severity-levels`)
  - ❌ Test-only bypass (lines 3934-3937, anchor `#test-only-bypass`)
  - ❌ Environment check (lines 3938-3941, anchor `#environment-check`)
  - ❌ Binary threshold (lines 3942-3972, anchor `#binary-threshold`)
  - Create draft layout in layout_registry.py first, then verify (lines 4008-4013, anchor `#create-draft-layout-in-layoutregistrypy-first-then-verify`)
  - Review output and answer verification questions: (lines 4014-4014, anchor `#review-output-and-answer-verification-questions`)
  - - Does each column contain expected content type? (lines 4015-4015, anchor `#--does-each-column-contain-expected-content-type`)
  - - Are any values truncated or spanning wrong columns? (lines 4016-4016, anchor `#--are-any-values-truncated-or-spanning-wrong-columns`)
  - - Are end indices EXCLUSIVE (not inclusive)? (lines 4017-4018, anchor `#--are-end-indices-exclusive-not-inclusive`)
  - Adjust positions if needed, re-run until all correct (lines 4019-4024, anchor `#adjust-positions-if-needed-re-run-until-all-correct`)
  - 21.6 Incremental (Phased) Implementation Strategy (Added 2025-10-17) (lines 4235-4269, anchor `#216-incremental-phased-implementation-strategy-added-2025-10-17`)
  - A.1 Fixed-Width TXT Files (lines 4310-4321, anchor `#a1-fixed-width-txt-files`)
  - A.2 CSV Files (lines 4322-4331, anchor `#a2-csv-files`)
  - A.3 Excel Workbooks (lines 4332-4341, anchor `#a3-excel-workbooks`)
  - B.1 HCPCS Code Variations (lines 4355-4361, anchor `#b1-hcpcs-code-variations`)
  - B.2 RVU Component Variations (lines 4362-4374, anchor `#b2-rvu-component-variations`)
  - D.1 Deprecation Policy (lines 4405-4436, anchor `#d1-deprecation-policy`)
  - D.2 Migration Timeline (lines 4437-4444, anchor `#d2-migration-timeline`)

## Manual Review Needed
The following sections did not match known governance buckets; decide where they belong:
- Scenarios (lines 81-103)
- Location: In parser module (e.g., gpci_parser.py) (lines 203-248)
- Usage in parser (lines 249-404)
- ❌ WRONG: Only map one format (lines 405-410)
- ✅ CORRECT: All formats covered (lines 411-423)
- ❌ WRONG: Exact case required (lines 424-427)
- ✅ CORRECT: Case-insensitive (lines 428-435)
- ❌ WRONG: Skip unmapped columns silently (lines 436-438)
- ✅ CORRECT: Log unmapped columns (lines 439-446)
- ❌ WRONG: Delete old aliases (lines 447-447)
- Removed '2024 PW GPCI' (no longer used) (lines 448-449)
- ✅ CORRECT: Keep for historical data (lines 450-493)
- Recommended: Use parser kit (handles all cases) (lines 516-562)
- Stage 1: Clean strings (remove whitespace, NBSP) (lines 563-565)
- Stage 2: Cast to intermediate types (pandas native) (lines 566-568)
- Pattern: Check for empty before casting (lines 576-591)
- ❌ WRONG: Direct Decimal() fails on empty/invalid (lines 620-625)
- ✅ CORRECT: Cast with coercion, handle NaN (lines 626-628)
- ❌ WRONG: Direct int() fails on empty (lines 629-634)
- ✅ CORRECT: Map known values, handle unknown (lines 635-638)
- ❌ WRONG: Direct bool() gives unexpected results (lines 639-644)
- ✅ CORRECT: Use pandas with format, handle errors (lines 645-647)
- ❌ WRONG: No format specified, ambiguous dates (lines 648-657)
- ❌ WRONG: Crashes on first invalid value (lines 658-660)
- ✅ CORRECT: Handle errors gracefully (lines 661-666)
- ✅ CORRECT: Log coercion failures (lines 670-679)
- ❌ WRONG: Assume float input (lines 680-682)
- ✅ CORRECT: Cast first, then operate (lines 683-688)
- ❌ WRONG: Empty strings fail (lines 689-691)
- ✅ CORRECT: Filter empties (lines 692-693)
- 5.3 Output Artifacts (lines 813-851)
- 5.4 CMS File Type Support (lines 852-876)
- Pure function requirement (lines 913-915)
- Example signature for dataset-specific parser (lines 916-1010)
- Required metadata columns (lines 1125-1133)
- 6.5 Integration with DIS Pipeline (lines 1149-1215)
- 6.6 Schema vs API Naming Convention (v1.3) (lines 1216-1238)
- result.data has columns: rvu_work, rvu_pe_nonfac, rvu_pe_fac, rvu_malp (lines 1241-1242)
- Database stores schema format (no transformation): (lines 1243-1245)
- Transformation layer (NOT in parser, NOT in schema) (lines 1282-1282)
- Location: cms_pricing/mappers/__init__.py (API adapter only) (lines 1283-1295)
- Check file extension first (90% of cases) (lines 1324-1381)
- 7.1.5 Common Detection Pitfalls (lines 1503-1506)
- ❌ WRONG: Trust extension blindly (lines 1507-1510)
- ✅ CORRECT: Verify with content (lines 1511-1517)
- ❌ WRONG: Fail immediately (lines 1518-1522)
- ✅ CORRECT: Try CSV as fallback (lines 1523-1534)
- ❌ WRONG: Check only first line (lines 1535-1537)
- ✅ CORRECT: Check first 500-1000 bytes (lines 1538-1543)
- Looks up: ("pprrvu", "2025", "Q4"), then ("pprrvu", "2025", None) (lines 1631-1631)
- Returns: {'version': 'v2025.4.1', 'columns': {...}, 'min_line_length': 165} (lines 1632-1653)
- File: layout_registry/pprrvu/v2025.4.0.yaml (lines 1654-1684)
- In parser, after _normalize_column_names(df): (lines 1712-1748)
- Result: 0/7 tests passing, KeyError: 'rvu_work' (lines 1749-1763)
- Result: 7/7 tests passing, production-ready (lines 1764-1790)
- 7.4 CI Test Snippets (v1.3 - Copy/Paste Guards) (lines 1791-1872)
- In tests/ingestion/test_layout_compliance.py (lines 1873-1885)
- See cms_pricing/ingestion/parsers/_parser_kit.py for full implementation (lines 1926-1933)
- Usage (lines 1934-1943)
- Returns ValidationResult with: (lines 1944-1944)
- - valid_df: Valid rows with categorical dtypes applied (lines 1945-1945)
- - rejects_df: Rejected rows with row_id, schema_id, release_id, reason codes (lines 1946-1946)
- In parser module (e.g., pprrvu_parser.py): (lines 2045-2047)
- In parser normalize stage: (lines 2048-2071)
- Could externalize to config file: (lines 2072-2080)
- ❌ WRONG: Fails on empty strings or nulls (lines 2195-2198)
- ❌ WRONG: Fails on empty DataFrame (lines 2199-2204)
- ✅ CORRECT: Filter empty values before aggregation (lines 2205-2232)
- ❌ WRONG: Fails if column has empty strings (lines 2394-2396)
- ❌ WRONG: Fails on empty DataFrame (lines 2397-2399)
- Safe Min/Max Calculation (lines 2408-2461)
- Safe Count Calculation (lines 2475-2498)
- Safe Percentage Calculation (lines 2499-2528)
- Core counts (always include) (lines 2534-2541)
- Encoding info (lines 2542-2547)
- Column-specific stats (use safe aggregation) (lines 2548-2553)
- Null rates (safe percentage) (lines 2554-2559)
- Categorical distributions (top N) (lines 2560-2564)
- Anti-Patterns to Avoid (lines 2617-2620)
- ❌ WRONG: Fails on empty strings (lines 2621-2623)
- ✅ CORRECT: Filter first (lines 2624-2630)
- ❌ WRONG: Returns NaN or fails (lines 2631-2633)
- ✅ CORRECT: Check for empty (lines 2634-2639)
- ❌ WRONG: Silently accepts impossible values (lines 2640-2642)
- ✅ CORRECT: Validate against expected range (lines 2643-2650)
- ❌ WRONG: Breaks if column has strings and numbers (lines 2651-2653)
- ✅ CORRECT: Convert to numeric first (lines 2654-2660)
- 11.1 Provenance Manifest (lines 2719-2769)
- 12.4 Backfill Requirements (lines 2814-2824)
- 14.1 Unit Tests (lines 2847-2888)
- 14.3 Schema Drift Tests (lines 2900-2909)
- 14.4 Layout Version Tests (lines 2910-2918)
- 14.5 Performance Tests (lines 2919-2929)
- 14.6 Schema File Naming & Loading (v1.3) (lines 2930-2986)
- 15.1 Deployment Strategy (lines 2989-3001)
- 15.2 Monitoring (lines 3002-3017)
- 17.1 Existing Components (lines 3070-3102)
- 17.2 Implementation Status (lines 3103-3117)
- Phase 3: Performance Optimization (Future) (lines 3228-3238)
- Phase 4: Advanced Features (Future) (lines 3239-3251)
- Use keyword arguments (self-documenting): (lines 3266-3279)
- Layout:          Schema: (lines 3284-3291)
- BEFORE coding parser, verify alignment: (lines 3292-3299)
- Fails fast with: Missing: {'rvu_work', 'modifier', 'rvu_malp'} (lines 3300-3306)
- Measure actual data first: (lines 3317-3318)
- Output: 173, 173, 173, ... (lines 3319-3320)
- Set conservatively (with margin): (lines 3321-3328)
- Unknown value 'Z' silently becomes NaN! ❌ (lines 3334-3338)
- Validate BEFORE casting: (lines 3339-3344)
- Only then cast: (lines 3345-3352)
- Includes release_id, parsed_at! ❌ (lines 3358-3363)
- Exclude metadata columns: (lines 3364-3379)
- Column becomes: '\ufeffhcpcs' (U+FEFF BOM prefix) (lines 3385-3391)
- Detect and strip BOM BEFORE parsing: (lines 3392-3398)
- Verify after normalization: (lines 3399-3404)
- CSV has: description,amount,description (lines 3409-3410)
- Pandas auto-renames: description, amount, description.1 (lines 3411-3416)
- Detect and reject duplicate headers (add to §21.1 template): (lines 3417-3422)
- OR normalize intentionally (if duplicates are expected): (lines 3423-3428)
- Excel date 01/02/2025 → locale-dependent interpretation (lines 3434-3434)
- Float 19.31 → 19.30999999999... (binary precision loss) (lines 3435-3439)
- Read Excel as strings, then cast: (lines 3440-3442)
- Cast with schema-driven precision: (lines 3443-3456)
- Then validate: (lines 3478-3486)
- Windows file with CRLF endings: (lines 3491-3495)
- min_line_length check fails or last char misaligned (lines 3496-3500)
- Strip CRLF when measuring and detecting data start: (lines 3501-3511)
- Step 1: Cast to canonical string (for hashing) (lines 3531-3533)
- Convert back to numeric for comparison (lines 3535-3569)
- 21.1 Standard Parser Structure (lines 3591-3704)
- Phase Order (MUST) (lines 3709-3715)
- String vs Numeric Handling (CRITICAL) (lines 3716-3722)
- ✅ CORRECT: Validate after canonicalization with numeric conversion (lines 3727-3739)
- Rejects Aggregation Pattern (lines 3740-3744)
- Aggregate all rejects (lines 3760-3766)
- ❌ POOR: Generic message (lines 3779-3781)
- ❌ POOR: No context (lines 3788-3790)
- ✅ GOOD: Include example duplicate (lines 3791-3798)
- In main parser (lines 3827-3833)
- Tests look for specific keys (lines 3834-3839)
- ❌ PROHIBITED: Test-only bypass flag (lines 3847-3856)
- ✅ REQUIRED: Tiered thresholds with severity levels (lines 3857-3900)
- ❌ Test-only bypass (lines 3934-3937)
- ❌ Environment check (lines 3938-3941)
- ❌ Binary threshold (lines 3942-3972)
- Create draft layout in layout_registry.py first, then verify (lines 4008-4013)
- Review output and answer verification questions: (lines 4014-4014)
- - Does each column contain expected content type? (lines 4015-4015)
- - Are any values truncated or spanning wrong columns? (lines 4016-4016)
- - Are end indices EXCLUSIVE (not inclusive)? (lines 4017-4018)
- Adjust positions if needed, re-run until all correct (lines 4019-4024)
- 21.6 Incremental (Phased) Implementation Strategy (Added 2025-10-17) (lines 4235-4269)
- A.1 Fixed-Width TXT Files (lines 4310-4321)
- A.2 CSV Files (lines 4322-4331)
- A.3 Excel Workbooks (lines 4332-4341)
- B.1 HCPCS Code Variations (lines 4355-4361)
- B.2 RVU Component Variations (lines 4362-4374)
- D.1 Deprecation Policy (lines 4405-4436)
- D.2 Migration Timeline (lines 4437-4444)

## Execution Checklist
- [ ] Seed each new document with the governance header (`Status`, `Owners`, `Consumers`, `Change control`).
- [ ] Add `## Change Log` with initial entry (`vX.Y.Z – Initial adoption / Modularization`).
- [ ] Preserve or update anchors referenced by other documents (consider creating stub sections during transition).
- [ ] Update `DOC-master-catalog-prd-v*.md` with new entries and companion relationships.
- [ ] Run `tools/audit_doc_links.py`, `tools/audit_cross_references.py`, and `tools/audit_doc_catalog.py`.
- [ ] Archive the original document with a `Deprecated` status once migration completes.


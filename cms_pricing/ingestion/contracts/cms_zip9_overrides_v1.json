{
  "dataset_name": "cms_zip9_overrides",
  "name": "cms_zip9_overrides",
  "version": "1.0",
  "description": "CMS ZIP9 overrides for precise locality mapping",
  "source": "CMS.gov - Zip Codes Requiring 4 Extension files",
  "classification": "public",
  "license": "CMS Public Domain",
  "attribution_required": false,
  "schema_version": "1.0.0",
  "created_at": "2025-09-29T12:00:00Z",
  "updated_at": "2025-09-29T12:00:00Z",
  "columns": {
    "zip9_low": {
      "name": "zip9_low",
      "type": "string",
      "nullable": false,
      "description": "Low end of ZIP9 range (9 digits)",
      "pattern": "^[0-9]{9}$",
      "min_length": 9,
      "max_length": 9,
      "sample_values": ["902100000", "100010000", "606010000"]
    },
    "zip9_high": {
      "name": "zip9_high",
      "type": "string", 
      "nullable": false,
      "description": "High end of ZIP9 range (9 digits)",
      "pattern": "^[0-9]{9}$",
      "min_length": 9,
      "max_length": 9,
      "sample_values": ["902109999", "100019999", "606019999"]
    },
    "state": {
      "name": "state",
      "type": "string",
      "nullable": false,
      "description": "Two-letter state code",
      "pattern": "^[A-Z]{2}$",
      "min_length": 2,
      "max_length": 2,
      "domain": ["AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "DC", "PR", "VI", "GU", "AS", "MP"],
      "sample_values": ["CA", "NY", "IL", "TX", "FL"]
    },
    "locality": {
      "name": "locality",
      "type": "string",
      "nullable": false,
      "description": "CMS locality code (2 digits)",
      "pattern": "^[0-9]{2}$",
      "min_length": 2,
      "max_length": 2,
      "sample_values": ["01", "02", "03", "04", "05"]
    },
    "rural_flag": {
      "name": "rural_flag",
      "type": "string",
      "nullable": true,
      "description": "Rural flag (A, B, or null)",
      "pattern": "^[AB]$",
      "min_length": 1,
      "max_length": 1,
      "domain": ["A", "B"],
      "sample_values": ["A", "B", null]
    },
    "effective_from": {
      "name": "effective_from",
      "type": "date",
      "nullable": false,
      "description": "Effective start date",
      "format": "YYYY-MM-DD",
      "sample_values": ["2025-08-14"]
    },
    "effective_to": {
      "name": "effective_to",
      "type": "date",
      "nullable": true,
      "description": "Effective end date (null for ongoing)",
      "format": "YYYY-MM-DD",
      "sample_values": [null]
    },
    "vintage": {
      "name": "vintage",
      "type": "string",
      "nullable": false,
      "description": "Data vintage (YYYY-MM-DD)",
      "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
      "sample_values": ["2025-08-14"]
    },
    "source_filename": {
      "name": "source_filename",
      "type": "string",
      "nullable": true,
      "description": "Source filename",
      "sample_values": ["ZIP9_OCT2025.txt"]
    },
    "ingest_run_id": {
      "name": "ingest_run_id",
      "type": "uuid",
      "nullable": true,
      "description": "Ingestion run ID",
      "sample_values": ["550e8400-e29b-41d4-a716-446655440000"]
    },
    "data_quality_score": {
      "name": "data_quality_score",
      "type": "float",
      "nullable": true,
      "description": "Data quality score (0.0-1.0)",
      "min_value": 0.0,
      "max_value": 1.0,
      "sample_values": [0.95, 0.98, 1.0]
    },
    "validation_results": {
      "name": "validation_results",
      "type": "json",
      "nullable": true,
      "description": "Validation results JSON",
      "sample_values": ["{\"status\": \"validated\", \"rules_passed\": 8, \"quality_score\": 0.95}"]
    },
    "processing_timestamp": {
      "name": "processing_timestamp",
      "type": "datetime",
      "nullable": true,
      "description": "Processing timestamp",
      "format": "ISO 8601",
      "sample_values": ["2025-09-29T12:34:56Z"]
    },
    "file_checksum": {
      "name": "file_checksum",
      "type": "string",
      "nullable": true,
      "description": "Source file SHA256 checksum",
      "pattern": "^[a-f0-9]{64}$",
      "sample_values": ["1a52c0f879724f55a12e5a645493a108903a0f703db550ccef4a0e25ef06b072"]
    },
    "record_count": {
      "name": "record_count",
      "type": "integer",
      "nullable": true,
      "description": "Number of records in source file",
      "min_value": 0,
      "sample_values": [1000, 5000, 10000]
    },
    "schema_version": {
      "name": "schema_version",
      "type": "string",
      "nullable": true,
      "description": "Schema version",
      "sample_values": ["1.0"]
    },
    "business_rules_applied": {
      "name": "business_rules_applied",
      "type": "json",
      "nullable": true,
      "description": "Business rules applied during processing",
      "sample_values": ["[\"zip9_format_validation\", \"state_code_validation\", \"locality_code_validation\", \"range_validation\"]"]
    }
  },
  "constraints": {
    "primary_key": ["zip9_low", "zip9_high"],
    "unique_constraints": [
      {
        "name": "zip9_range_unique",
        "columns": ["zip9_low", "zip9_high"]
      }
    ],
    "check_constraints": [
      {
        "name": "zip9_low_format",
        "expression": "zip9_low ~ '^[0-9]{9}$'"
      },
      {
        "name": "zip9_high_format", 
        "expression": "zip9_high ~ '^[0-9]{9}$'"
      },
      {
        "name": "zip9_range_valid",
        "expression": "zip9_low <= zip9_high"
      },
      {
        "name": "state_code_valid",
        "expression": "state ~ '^[A-Z]{2}$'"
      },
      {
        "name": "locality_code_valid",
        "expression": "locality ~ '^[0-9]{2}$'"
      },
      {
        "name": "rural_flag_valid",
        "expression": "rural_flag IS NULL OR rural_flag IN ('A', 'B')"
      },
      {
        "name": "effective_dates_valid",
        "expression": "effective_to IS NULL OR effective_from <= effective_to"
      }
    ]
  },
  "indexes": [
    {
      "name": "idx_zip9_low",
      "columns": ["zip9_low"],
      "type": "btree"
    },
    {
      "name": "idx_zip9_high", 
      "columns": ["zip9_high"],
      "type": "btree"
    },
    {
      "name": "idx_zip9_state",
      "columns": ["state"],
      "type": "btree"
    },
    {
      "name": "idx_zip9_locality",
      "columns": ["locality"],
      "type": "btree"
    },
    {
      "name": "idx_zip9_vintage",
      "columns": ["vintage"],
      "type": "btree"
    },
    {
      "name": "idx_zip9_range",
      "columns": ["zip9_low", "zip9_high"],
      "type": "btree"
    }
  ],
  "business_rules": [
    {
      "name": "zip9_format_validation",
      "description": "ZIP9 codes must be exactly 9 digits",
      "severity": "critical",
      "expression": "zip9_low ~ '^[0-9]{9}$' AND zip9_high ~ '^[0-9]{9}$'"
    },
    {
      "name": "zip9_range_validation",
      "description": "ZIP9 low must be less than or equal to ZIP9 high",
      "severity": "critical", 
      "expression": "zip9_low <= zip9_high"
    },
    {
      "name": "state_code_validation",
      "description": "State code must be valid 2-letter US state code",
      "severity": "critical",
      "expression": "state IN ('AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY', 'DC', 'PR', 'VI', 'GU', 'AS', 'MP')"
    },
    {
      "name": "locality_code_validation",
      "description": "Locality code must be 2 digits",
      "severity": "critical",
      "expression": "locality ~ '^[0-9]{2}$'"
    },
    {
      "name": "rural_flag_validation",
      "description": "Rural flag must be A, B, or null",
      "severity": "warning",
      "expression": "rural_flag IS NULL OR rural_flag IN ('A', 'B')"
    },
    {
      "name": "effective_dates_validation",
      "description": "Effective dates must be valid",
      "severity": "warning",
      "expression": "effective_to IS NULL OR effective_from <= effective_to"
    },
    {
      "name": "zip5_prefix_consistency",
      "description": "ZIP9 codes must have consistent ZIP5 prefix",
      "severity": "warning",
      "expression": "LEFT(zip9_low, 5) = LEFT(zip9_high, 5)"
    },
    {
      "name": "state_consistency",
      "description": "ZIP9 codes must be consistent with state",
      "severity": "critical",
      "expression": "LEFT(zip9_low, 5) IN (SELECT zip5 FROM cms_zip_locality WHERE state = zip9_overrides.state)"
    }
  ],
  "quality_gates": {
    "completeness": {
      "threshold": 0.95,
      "description": "At least 95% of records must have all required fields"
    },
    "accuracy": {
      "threshold": 0.90,
      "description": "At least 90% of records must pass validation rules"
    },
    "consistency": {
      "threshold": 0.85,
      "description": "At least 85% of records must be consistent with ZIP5 data"
    },
    "uniqueness": {
      "threshold": 1.0,
      "description": "100% of records must have unique ZIP9 ranges"
    }
  },
  "observability": {
    "metrics": [
      "record_count",
      "validation_pass_rate",
      "quality_score",
      "processing_duration",
      "error_count",
      "warning_count"
    ],
    "alerts": [
      {
        "name": "low_quality_score",
        "condition": "quality_score < 0.90",
        "severity": "warning"
      },
      {
        "name": "high_error_rate",
        "condition": "error_count > 0",
        "severity": "critical"
      },
      {
        "name": "processing_timeout",
        "condition": "processing_duration > 3600",
        "severity": "warning"
      }
    ]
  }
}
